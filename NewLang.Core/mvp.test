pub fn DoSomething(a: int): result::<int, string> {
    var b: int = 2;
    
    if (a > b) {
        return ok(a);
    }
    else if (a == b) {
        return result::<int, string>::Ok(b);
    }

    b = 3;

    var thing = new Class2 {
        A = 3
    };

    MyClass::StaticMethod();

    PrivateFn::<string>();
    
    if (false) {
        // lowercase error keyword
        return error("something wrong");
    }

    // Capital Error for fully resolved variant
    return result::<int, string>::Error("something wrong");
}

fn PrivateFn<T>() {
    Println("Message");
}

pub fn SomethingElse(a: int): result::<int, string> {
    var b = DoSomething(a)?;
    var mut c = 2;
    
    return result::<int, string>::Ok(b);
}

Println(DoSomething(5));
Println(DoSomething(1));
Println(SomethingElse(1));

pub class MyClass {
    pub fn PublicMethod() {
    }

    pub static fn StaticMethod() {

    }
    
    field FieldA: string;
    mut field FieldB: string;
    pub mut field FieldC: string;
    pub field FieldD: string;
    pub static field FieldE: string = "something";
    pub static mut field FieldF: string = "something";
}

pub class GenericClass<T> {
    pub fn PublicMethod<T1>() {
    }
}

// a class
pub class Class2 {
    pub field A: string;
}

/*
    A union
*/
pub union MyUnion {
    A,
    B { field MyField: string; },
    C(string),
    
    fn SomeMethod() {
        var foo = switch (this) {
            A => "",
            B { MyField } => MyField,
            C(value) => value
        };
        
        var bar = switch (this) {
            A => 1,
            B => 2,
            C => 3
        }
    }
}

fn AnotherMethod(param: MyUnion) {
    if (param is MyUnion::A) {
    }
    else if (param is MyUnion::B { MyField }) {
    }
    
    var a = switch (param) {
        MyUnion::A => 1,
        MyUnion::B { MyField } => 2,
        MyUnion::C(value) => 3
    };
}

var a = new MyUnion::A;

c = new MyUnion::B{ MyField = ""};